/*************************************************************
							REQUIRED
**************************************************************
APP.REPO_NAME
  Type: 	String
  Purpose:  The name of the repo where the application's load scripts reside. 
*************************************************************/
TRACE Qlik Scripting Framework (QSF) starting....;

TRACE ....____    ________;
TRACE .../ __ \  / __/ __/;
TRACE ../ /_/ / _\ \/ _/  ;
TRACE ..\___\_\/___/_/    ;


/*************************************************************
							CONSTANTS
*************************************************************/
SET SERVER.SCRIPT_LIB = Scripts;
SET SERVER.QSF_REPO_NAME = qsf;

/*************************************************************
							INITIALIZE
*************************************************************/
SET SERVER.QSF_LIB = $(SERVER.SCRIPT_LIB)/$(SERVER.QSF_REPO_NAME);
SET SERVER.ENV='';
SET APP.ENV='';
SET APP.SCRIPT='';
LET SERVER.DEBUG=False();

/*************************************************************
							INCLUDES
*************************************************************/
$(Must_Include=[lib://$(SERVER.QSF_LIB)/file_procs.qvs]);
$(Must_Include=[lib://$(SERVER.QSF_LIB)/table_procs.qvs]);
$(Must_Include=[lib://$(SERVER.QSF_LIB)/gen_procs.qvs]);
$(Must_Include=[lib://$(SERVER.QSF_LIB)/ini_procs.qvs]);
/************************************************************/

							
/*************************************************************
				READ SERVER CONFIG FILE
*************************************************************/
// Read the server configuration file
SET SERVER.CONFIG_FILE = "$(SERVER.QSF_LIB)/config.ini";
Call SetParameters( SERVER.CONFIG_FILE);

// Validate the server environment (must be DEV|TEST|UAT|PROD)
If Pick( SERVER.ENV, 'DEV', 'TEST', 'UAT', 'PROD')=0 Then 
	TRACE Invalid environment '$(SERVER.ENV)';
	TRACE Must be one of [DEV|TEST|UAT|PROD];
	
	Call DebugInit;
	Call DebugApp;
	Exit Script
End If 
/************************************************************/


// The calling application must provide a git repo name.  Fail if one is not provided.
If IsNull( APP.REPO_NAME) OR Trim( APP.REPO_NAME)='' Then 
	TRACE APP.REPO_NAME has not been set;
	TRACE You must link this application to a git repository;
	TRACE The git repo must be checked-out beneath the Scripts directory on the server;
	
	Call DebugInit;
	Call DebugApp;
	Exit Script 
End If 


/*************************************************************
				COMPARE SERVER.ENV TO APP.ENV
*************************************************************/
// Get the name of the calling application
APP.NAME = DocumentTitle();

// Parse the app name for environment reserved words.  Returns APP.ENV.
Call GetEnvFromAppName( APP.NAME, SERVER.ENV, APP.ENV);
TRACE APP.ENV = $(APP.ENV);


// If they match...
If (APP.ENV = SERVER.ENV) Then 
	// Do nothing - scripts will be loaded from a repo under the root (ex. /Scripts/some_repo)
	TRACE Application environment matches server environment;
	
Else 
	// Scripts will be loaded from a sub-directory under the root (ex. /Scripts/_UAT/some_repo)
	TRACE Application environment does NOT match server environment;
	SET SERVER.SCRIPT_LIB = "$(SERVER.SCRIPT_LIB)/_$(APP.ENV)";

End If
/************************************************************/


	
/*************************************************************
				SET APPLICATION SCRIPT LIBRARY
*************************************************************/
// Set the application script library based on the the APP.REPO_NAME
SET APP.SCRIPT_LIB = "$(SERVER.SCRIPT_LIB)/$(APP.REPO_NAME)";
/************************************************************/


/*************************************************************
				SHORT APP NAME
*************************************************************/
// Cleanse the app name (lowercase, remove reserved words and special characters)
Call shortenAppName( APP.NAME, APP.SHORT_NAME);

SET APP.CONFIG_FILE = "$(APP.SCRIPT_LIB)/$(APP.SHORT_NAME).ini";
/************************************************************/


/*************************************************************
				READ APPLICATION INI FILE
*************************************************************/
//Read the application's INI file (if there is one)
TRACE Loading application configuration file: '$(APP.CONFIG_FILE)';
Call SetParameters( APP.CONFIG_FILE);
/************************************************************/


/*************************************************************
			SET SOME OTHER GLOBAL VARS
*************************************************************/
If APP.LIMIT_ROWS Then 
	// Intended for developers to use in their load scripts.
	SET LOAD_PREFIX_FIRST = "FIRST $(APP.ROW_LIMIT)";
	LOAD_PREFIX_CONCAT = '';
Else
	LOAD_PREFIX_FIRST = '';
	LOAD_PREFIX_CONCAT = '';
End If
/**************************************************************************************************************/


/***************************************************************************************************************
		QSF is done.  RUN THE APP'S SCRIPT
		Default is <APP.SHORT_NAME>.qvs unless overridden in the INI file.
		If set, the script will be <APP.SCRIPT_NAME>.qvs
***************************************************************************************************************/
// Set the defaults
SET sFileName = $(APP.SHORT_NAME);
sExt='qvs';

// See if APP.SCRIPT_NAME was set in the INI file 
If Len( APP.SCRIPT_NAME)>0 Then

	TRACE QSF: APP.SCRIPT_NAME was overrideen.;	
	// Parse the APP.SCRIPT_NAME variable to get the path components
	Call ParseFileURI( '$(APP.SCRIPT_NAME)', sUpperPath, sFileName, sExt);

Else 
	// If the APP.SCRIPT_NAME was not set, use APP.SHORT_NAME
	TRACE QSF: APP.SCRIPT_NAME was not set.;
End If

// Construct the URI for the script file
Call SetFileURI( APP.SCRIPT_LIB, sUpperPath, sFileName, sExt, APP.SCRIPT_FILE);
TRACE QSF: Application script file is set to: APP.SCRIPT_FILE = '$(APP.SCRIPT_FILE)';

// See if the script file exists...
Call FileExists( APP.SCRIPT_FILE, bScriptExists);

// Abort if it doesn't exist
If NOT bScriptExists Then 
	TRACE QSF: '$(APP.SCRIPT_FILE)' was not found.  Aborting...;
	
	Call DebugInit;
	Call DebugApp;
	Exit Script;
End If

// Debug
If (SERVER.DEBUG) Then 
	Call DebugInit;
	Call DebugApp;
End If 

// If we are not clearing the app then run the script
If NOT (APP.CLEAR) Then 
	TRACE QSF: Including $(APP.SCRIPT_FILE)...;	
	
	// Run the script
	$(Include=[lib://$(APP.SCRIPT_FILE)]);
End If 
/**************************************************************************************************************/

//Clean up
If NOT (SERVER.DEBUG) Then 
	Call DropConfigTables;
End If 
